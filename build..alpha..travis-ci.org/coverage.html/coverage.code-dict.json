{"/home/travis/build/npmtest/node-npmtest-cfork/test.js":"/* istanbul instrument in package npmtest_cfork */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cfork/lib.npmtest_cfork.js":"/* istanbul instrument in package npmtest_cfork */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cfork = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cfork = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cfork/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cfork && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cfork */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cfork\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cfork.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cfork.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cfork.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cfork.__dirname + '/lib.npmtest_cfork.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cfork/node_modules/cfork/index.js":"'use strict';\n\nvar cluster = require('cluster');\nvar os = require('os');\nvar util = require('util');\n\nvar defer = global.setImmediate || process.nextTick;\n\nmodule.exports = fork;\n\n/**\n * cluster fork\n *\n * @param {Object} [options]\n *   - {String} exec       exec file path\n *   - {Array} [args]      exec arguments\n *   - {Array} [slaves]    slave processes\n *   - {Boolean} [silent]  whether or not to send output to parent's stdio, default is `false`\n *   - {Number} [count]    worker num, defualt is `os.cpus().length`\n *   - {Boolean} [refork]  refork when disconect and unexpected exit, default is `true`\n *   - {Boolean} [autoCoverage] auto fork with istanbul when `running_under_istanbul` env set, default is `false`\n * @return {Cluster}\n */\n\nfunction fork(options) {\n  if (cluster.isWorker) {\n    return;\n  }\n\n  options = options || {};\n  var count = options.count || os.cpus().length;\n  var refork = options.refork !== false;\n  var limit = options.limit || 60;\n  var duration = options.duration || 60000; // 1 min\n  var reforks = [];\n  var attachedEnv = options.env || {};\n  var newWorker;\n\n  if (options.exec) {\n    var opts = {\n      exec: options.exec\n    };\n\n    if (options.execArgv !== undefined) {\n      opts.execArgv = options.execArgv;\n    }\n\n    if (options.args !== undefined) {\n      opts.args = options.args;\n    }\n    if (options.silent !== undefined) {\n      opts.silent = options.silent;\n    }\n\n    // https://github.com/gotwarlost/istanbul#multiple-process-usage\n    // Multiple Process under istanbul\n    if (options.autoCoverage && process.env.running_under_istanbul) {\n      // use coverage for forked process\n      // disabled reporting and output for child process\n      // enable pid in child process coverage filename\n      var args = [\n        'cover', '--report', 'none', '--print', 'none', '--include-pid',\n        opts.exec,\n      ];\n      if (opts.args && opts.args.length > 0) {\n        args.push('--');\n        args = args.concat(opts.args);\n      }\n\n      opts.exec = './node_modules/.bin/istanbul';\n      opts.args = args;\n    }\n\n    cluster.setupMaster(opts);\n  }\n\n  var disconnects = {};\n  var disconnectCount = 0;\n  var unexpectedCount = 0;\n\n  cluster.on('disconnect', function (worker) {\n    disconnectCount++;\n    var isDead = worker.isDead && worker.isDead();\n    console.error('[%s] [cfork:master:%s] worker:%s disconnect (suicide: %s, state: %s, isDead: %s)',\n      Date(), process.pid, worker.process.pid, worker.suicide, worker.state, isDead);\n    if (isDead) {\n      // worker has terminated before disconnect\n      console.error('[%s] [cfork:master:%s] don\\'t fork, because worker:%s exit event emit before disconnect',\n        Date(), process.pid, worker.process.pid);\n      return;\n    }\n\n    disconnects[worker.process.pid] = Date();\n    if (allow()) {\n      newWorker = forkWorker(worker._clusterSettings);\n      newWorker._clusterSettings = worker._clusterSettings;\n      console.error('[%s] [cfork:master:%s] new worker:%s fork (state: %s)',\n        Date(), process.pid, newWorker.process.pid, newWorker.state);\n    } else {\n      console.error('[%s] [cfork:master:%s] don\\'t fork new work (refork: %s)',\n        Date(), process.pid, refork);\n    }\n  });\n\n  cluster.on('exit', function (worker, code, signal) {\n    var isExpected = !!disconnects[worker.process.pid];\n    var isDead = worker.isDead && worker.isDead();\n    console.error('[%s] [cfork:master:%s] worker:%s exit (code: %s, suicide: %s, state: %s, isDead: %s, isExpected: %s)',\n      Date(), process.pid, worker.process.pid, code, worker.suicide, worker.state, isDead, isExpected);\n    if (isExpected) {\n      delete disconnects[worker.process.pid];\n      // worker disconnect first, exit expected\n      return;\n    }\n\n    unexpectedCount++;\n    if (allow()) {\n      newWorker = forkWorker(worker._clusterSettings);\n      newWorker._clusterSettings = worker._clusterSettings;\n      console.error('[%s] [cfork:master:%s] new worker:%s fork (state: %s)',\n        Date(), process.pid, newWorker.process.pid, newWorker.state);\n    } else {\n      console.error('[%s] [cfork:master:%s] don\\'t fork new work (refork: %s)',\n        Date(), process.pid, refork);\n    }\n    cluster.emit('unexpectedExit', worker, code, signal);\n  });\n\n  // defer to set the listeners\n  // so you can listen this by your own\n  defer(function () {\n    if (process.listeners('uncaughtException').length === 0) {\n      process.on('uncaughtException', onerror);\n    }\n    if (cluster.listeners('unexpectedExit').length === 0) {\n      cluster.on('unexpectedExit', onUnexpected);\n    }\n    if (cluster.listeners('reachReforkLimit').length === 0) {\n      cluster.on('reachReforkLimit', onReachReforkLimit);\n    }\n  });\n\n  for (var i = 0; i < count; i++) {\n    newWorker = forkWorker();\n    newWorker._clusterSettings = cluster.settings;\n  }\n\n  // fork slaves after workers are forked\n  if (options.slaves) {\n    var slaves = Array.isArray(options.slaves) ? options.slaves : [options.slaves];\n    slaves.map(normalizeSlaveConfig)\n      .forEach(function(settings) {\n        if (settings) {\n          newWorker = forkWorker(settings);\n          newWorker._clusterSettings = settings;\n        }\n      });\n  }\n\n  return cluster;\n\n  /**\n   * allow refork\n   */\n  function allow() {\n    if (!refork) {\n      return false;\n    }\n\n    var times = reforks.push(Date.now());\n\n    if (times > limit) {\n      reforks.shift();\n    }\n\n    var span = reforks[reforks.length - 1] - reforks[0];\n    var canFork = reforks.length < limit || span > duration;\n\n    if (!canFork) {\n      cluster.emit('reachReforkLimit');\n    }\n\n    return canFork;\n  }\n\n  /**\n   * uncaughtException default handler\n   */\n\n  function onerror(err) {\n    if (!err) {\n      return;\n    }\n    console.error('[%s] [cfork:master:%s] master uncaughtException: %s', Date(), process.pid, err.stack);\n    console.error(err);\n    console.error('(total %d disconnect, %d unexpected exit)', disconnectCount, unexpectedCount);\n  }\n\n  /**\n   * unexpectedExit default handler\n   */\n\n  function onUnexpected(worker, code, signal) {\n    var exitCode = worker.process.exitCode;\n    var err = new Error(util.format('worker:%s died unexpected (code: %s, signal: %s, suicide: %s, state: %s)',\n      worker.process.pid, exitCode, signal, worker.suicide, worker.state));\n    err.name = 'WorkerDiedUnexpectedError';\n\n    console.error('[%s] [cfork:master:%s] (total %d disconnect, %d unexpected exit) %s',\n      Date(), process.pid, disconnectCount, unexpectedCount, err.stack);\n  }\n\n  /**\n   * reachReforkLimit default handler\n   */\n\n  function onReachReforkLimit() {\n    console.error('[%s] [cfork:master:%s] worker died too fast (total %d disconnect, %d unexpected exit)',\n      Date(), process.pid, disconnectCount, unexpectedCount);\n  }\n\n  /**\n   * normalize slave config\n   */\n  function normalizeSlaveConfig(opt) {\n    // exec path\n    if (typeof opt === 'string') {\n      opt = { exec: opt };\n    }\n    if (!opt.exec) {\n      return null;\n    } else {\n      return opt;\n    }\n  }\n\n  /**\n   * fork worker with certain settings\n   */\n  function forkWorker(settings) {\n    if (settings) {\n      cluster.settings = settings;\n      cluster.setupMaster();\n    }\n    return cluster.fork(attachedEnv);\n  }\n}\n"}